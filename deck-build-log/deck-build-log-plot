#!/usr/bin/python2

import argparse
import base64
import datetime
import io
import json
import os
import re
import urllib2

import matplotlib.dates
import matplotlib.pyplot


# https://bugzilla.readthedocs.io/en/latest/api/core/v1/attachment.html#create-attachment
bugzilla_template = 'https://bugzilla.redhat.com/rest/bug/{}/attachment'


parser = argparse.ArgumentParser(
    description='Plot matching build failures over time.',
)
parser.add_argument(
    '-b', '--bug', dest='bug', type=int,
    help='Red Hat Bugzilla bug number for uploading an attachment.',
)
parser.add_argument(
    '-k', '--api-key', dest='api_key',
    help='Red Hat Bugzilla API key ( https://bugzilla.readthedocs.io/en/latest/using/preferences.html#api-keys ).',
)
parser.add_argument(
    'regexp', metavar='REGEXP',
    help='Python regular expression for matching build logs.',
)
args = parser.parse_args()

build_log_regexp = re.compile(args.regexp)
if args.bug is not None and args.api_key is None:
    raise ValueError('if --bug is set, --api-key must also be set')


def value(job, build_log):
    # FIXME: calculate your y-axis value
    start = datetime.datetime.utcfromtimestamp(int(job['started']))
    stop = datetime.datetime.strptime(job['finished'], '%Y-%m-%dT%H:%M:%SZ')  # fromisoformat is new in Python 3.7
    return (stop - start).total_seconds() / 60.


match_color = [1, 0, 0, 1]  # red, green, blue, alpha
def color(job, build_log):
    # FIXME: calculate your dot color
    if build_log_regexp.search(build_log) is None:
        return [0, 0, 1, 0.2]
    return match_color


cache = os.path.join(os.path.expanduser('~'), '.cache', 'openshift-deck-build-logs')
entries = []
for root, _, files in os.walk(cache):
    if 'job.json' in files and 'build-log.txt' in files:
        with open(os.path.join(root, 'job.json'), 'rb') as f:
            job = json.load(f)
        with open(os.path.join(root, 'build-log.txt'), 'r') as f:
            build_log = f.read()
        start = datetime.datetime.fromtimestamp(int(job['started']))
        #if not start.isoformat().startswith('2019-03-21'):  # example of date filtering
        #    continue
        entries.append({
            'started': start,
            'value': value(job=job, build_log=build_log),
            'color': color(job=job, build_log=build_log),
            'url': job['url'],
        })
entries.sort(key=lambda entry: entry['started'])
start = entries[0]['started']
stop = entries[-1]['started']

figure = matplotlib.pyplot.figure()
figure.set_size_inches(20, 5)
axes = figure.add_subplot(1, 1, 1)
axes.set_title('recent e2e-aws build failures, red for {!r} ({}/{})'.format(  # FIXME: adjust to match value() and color()
    args.regexp, len([e for e in entries if e['color'] == match_color]), len(entries)))
axes.set_ylabel('job duration (minutes)')  # FIXME: adjust to match value()
axes.set_xlabel('start time ({} to {} UTC)'.format(start.isoformat(), stop.isoformat()))

scatter = axes.scatter(
    x=[entry['started'] for entry in entries],
    y=[entry['value'] for entry in entries],
    c=[entry['color'] for entry in entries],
    edgecolor='',
)
scatter.set_urls([entry['url'] for entry in entries])

locator = matplotlib.dates.HourLocator(interval=4)
axes.xaxis.set_major_locator(locator)
axes.xaxis.set_major_formatter(matplotlib.dates.AutoDateFormatter(locator))
axes.set_xlim(start, stop)
axes.set_ylim(min(e['value'] for e in entries), max(e['value'] for e in entries))
figure.tight_layout()
figure.autofmt_xdate()
figure.savefig('deck-build-log.svg')
figure.savefig('deck-build-log.png')

if args.bug is not None:
    url = bugzilla_template.format(args.bug) + '?api_key={}'.format(args.api_key)
    buf = io.BytesIO()
    figure.savefig(buf, format='svg')
    data = {
        'ids': [args.bug],
        'data': base64.b64encode(buf.getvalue()),
        'file_name': 'deck-build-log.svg',
        'summary': 'Occurrences of this error in CI from {} to {} UTC'.format(
            start.strftime('%Y-%m-%dT%H:%M'),
            stop.strftime('%Y-%m-%dT%H:%M'),
        ),
        'content_type': 'image/svg+xml',
        'comment': '''This occurred in {matches} of our {total} failures in *-e2e-aws* jobs across the whole CI system over the past {hours} hours.  Generated with [1]:

  $ deck-build-log-plot {regexp!r}

[1]: https://github.com/wking/openshift-release/tree/debug-scripts/deck-build-log
'''.format(
            matches=len([e for e in entries if e['color'] == match_color]),
            total=len(entries),
            hours=int((stop - start).total_seconds()) // 3600,
            regexp=args.regexp,
        ),
    }
    try:
        response = urllib2.urlopen(urllib2.Request(
            url=url,
            data=json.dumps(data),
            headers={
                'Accept': 'application/json',
                'Content-Type': 'application/json',
                'X-BUGZILLA-API-KEY': args.api_key,  # but not supported yet by our Bugzilla 5.0.4.rh14, hence the query param above
            },
        ))
    except urllib2.HTTPError as error:
        response = error
    print('POSTed attachment to bug {} returned {}'.format(args.bug, response.getcode()))
    print(response.read())
    response.close()
